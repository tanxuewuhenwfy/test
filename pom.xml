<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>iTripBackend</artifactId>
        <groupId>cn.itrip</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>itrip-auth</artifactId>
    <packaging>war</packaging>

    <name>itrip-auth Maven Webapp</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

   <!-- <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>-->


    <dependencies>
        <dependency>
            <groupId>cn.itrip</groupId>
            <artifactId>itrip-dao</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--java邮箱注册jar包依赖-->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.7</version>
        </dependency>
        <!--正则表达式依赖包-->
        <dependency>
            <groupId>cn.itrip</groupId>
            <artifactId>itrip-jregex</artifactId>
            <!--<version>1.2_01</version>-->
            <version>1.2</version>
        </dependency>
        <!--手机验证码的依赖包-->
        <dependency>
            <groupId>cn.itrip.ccprestsms</groupId>
            <artifactId>itrip-ccprestsms</artifactId>
            <!--<version>1.0</version>-->
            <version>2.6.3</version>
        </dependency>
        <!--swagger自动生成接口API文档依赖包-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-staticdocs</artifactId>
            <version>2.4.0</version>
        </dependency>
    </dependencies>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <snippetsDirectory>${project.build.directory}/generated-snippets</snippetsDirectory>
        <asciidoctor.input.directory>${project.basedir}/docs/asciidoc</asciidoctor.input.directory>
        <generated.asciidoc.directory>${project.build.directory}/asciidoc</generated.asciidoc.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
    </properties>

    <!--<build>
        <plugins>
            &lt;!&ndash;Maven通过Maven Surefire Plugin插件执行单元测试&ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
            &lt;!&ndash; Run the generated asciidoc through Asciidoctor to generate
                 other documentation types, such as PDFs or HTML5 &ndash;&gt;
            &lt;!&ndash;通过Asciidoctor使得asciidoc生成其他的文档格式，例如：PDF 或者HTML5&ndash;&gt;
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>1.5.3</version>
                &lt;!&ndash; Include Asciidoctor PDF for pdf generation &ndash;&gt;
                &lt;!&ndash;生成PDF&ndash;&gt;
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>1.5.0-alpha.14</version>
                    </dependency>

                    &lt;!&ndash; Comment this section to use the default jruby artifact provided by the plugin &ndash;&gt;
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>1.7.21</version>
                    </dependency>
                </dependencies>

                &lt;!&ndash; Configure generic document generation settings &ndash;&gt;
                &lt;!&ndash;文档生成配置&ndash;&gt;
                <configuration>
                    <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                    <sourceDocumentName>index.adoc</sourceDocumentName>
                    <attributes>
                        <doctype>book</doctype>
                        <toc>left</toc>
                        <toclevels>3</toclevels>
                        <numbered></numbered>
                        <hardbreaks></hardbreaks>
                        <sectlinks></sectlinks>
                        <sectanchors></sectanchors>
                        <generated>${generated.asciidoc.directory}</generated>
                    </attributes>
                </configuration>
                &lt;!&ndash; Since each execution can only handle one backend, run
                   separate executions for each desired output type &ndash;&gt;
                &lt;!&ndash;因为每次执行只能处理一个后端，所以对于每个想要的输出类型，都是独立分开执行&ndash;&gt;
                <executions>
                    &lt;!&ndash;html5&ndash;&gt;
                    <execution>
                        <id>output-html</id>
                        <phase>test</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>-->
    <build>
        <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->
        <resources>
            <resource>
                <!--   描述存放资源的目录，该路径相对POM路径-->
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.4.2</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
